{"changed":true,"filter":false,"title":"ApiService.js","tooltip":"/api/services/ApiService.js","value":"    /*\n        CREATED BY DALE\n      \n    RESTFUL API TOKEN GENERATION USING JSON WEB TOKENS (INDUSTRY STANDARD RFC 7519). \n    THIS ALLOWS DEVELOPERS TO CONTROL WHO IS AUTHORIZED TO ACCESS CERTAIN METHODS WITHIN THE RESTFUL API, \n    AND ALSO ASSOCIATE REQUESTS WITH A PARTICULAR USER. THEY CAN BE USED FOR BOTH AUTHENTICATION AND AUTHORIZATION \n    AND ARE BECOMING POPULAR AS THEY ALLOW DEVELOPERS TO CREATE GRANULAR PERMISSIONS AND ACCESS TO RESOURCES, \n    SIMILAR TO WHEN A DBA ADMINISTRATES SINGLE USER DATABASE PERMISSIONS FOR CREATING, READING, UPDATING, DELETING AND DROPPING TABLES.\n    THE WAY THEY WORK IS BY USING BASE64 - A BINARY TO STRING ENCODING ALGORITHM - \n    ON BOTH A HEADER (CONSISTING OF AN ALGORITHM AND CERTAIN OTHER ATTRIBUTES) AND A PAYLOAD, \n    WHICH CAN CONTAIN ANY INFORMATION REQUIRED BY THE APPLICATION E.G. APPLICATION SPECIFIC INFORMATION. \n    FOR THIS PROJECT, WE ENCODED THE PERMISSIONS A CERTAIN TOKEN (OR USER OF A TOKEN) HAS WHEN ACCESSING \n    API ROUTES INTO THE PAYLOAD AND THE USER THAT THE TOKEN WAS GENERATED BY SO WE COULD ASSOCIATE IT WITH A \n    PARTICULAR USER LATER WHEN A HTTP REQUEST IS MADE TO THE UNDERLYING PLATFORMS API.  AFTER BOTH THE HEADER AND THE \n    PAYLOAD HAVE BEEN ENCODED IN BASE64, THEY ARE APPENDED VIA A SEPARATOR ‘.’ AND SIGNED USING A CRYPTOGRAPHIC HASH FUNCTION \n    (IN THE CASE OF THIS PROJECT, HMACSHA256 WAS USED AS THE HASH FUNCTION). THE HASH FUNCTION IS DESIGNED TO PROTECT THE MESSAGE\n    FROM BEING TAMPERED WITH, BUT INFORMATION WITHIN THE MESSAGE CAN STILL BE SEEN BY PRYING EYES BY SIMPLY BASE64 DECODING THE FIRST\n    TWO PARTS OF THE TOKEN. AS SUCH, CONFIDENTIAL INFORMATION SUCH AS PASSWORDS, SHOULD NOT BE STORED WITHIN THE PAYLOAD OR HEADER. \n    THE HASH FUNCTION TAKES A SECRET KEY AS INPUT WHICH CAN BE GENERATED ON THE SERVER AND KEPT SAFE. IF THE SECRET KEY BECOMES COMPROMISED, \n    IT SHOULD BE IMMEDIATELY ROTATED. AN EXAMPLE OF HOW THE THE PAYLOAD AND HEADER ARE SIGNED BY THE HMAC ALGORITHM IS SHOWN BELOW:\n    \n    HMACSHA256(\n      BASE64URLENCODE(HEADER) + \".\" +\n      BASE64URLENCODE(PAYLOAD),\n      SECRET //\n    )\n    \n    THE END RESULT OF THIS IS A TOKEN WITH 3 PARTS, WHICH LOOKS SOMETHING LIKE:\n    \n    \tEYJHBGCIOIJIUZI1NIISINR5CCI6IKPXVCJ9.EYJZDWIIOIIXMJM0NTY3ODKWIIWIBMFTZSI6IKPVAG4GRG9LIIWIYWRTAW4IONRYDWV9.TJVA95ORM7E2CBAB30RMHRHDCEFXJOYZGEFONFH7HGQ\n    \n    ALTHOUGH THE TOKEN IS INHERENTLY SAFE, AS THE SECRET USED FOR THE CRYPTOGRAPHIC HASH FUNCTION IS STORED ON THE SERVER\n    (IN A EXTERNAL FILE,  CONFIG FILE ECT) WE DECIDED TO MAKE IT EVEN SAFER, BY MAKING EACH API TOKEN SIGNED WITH A DIFFERENT SECRET. \n    TO DO THIS, API USERS ARE RESPONSIBLE FOR SUPPLYING HALF OF THE SECRET USED IN CRYPTOGRAPHIC HASH ALGORITHM. THIS ‘USER-HALF’ OF THE SECRET KEY \n    IS NOT STORED ANYWHERE BY OUR PLATFORM ITSELF, IT IS UP TO THE USER TO RETAIN THIS SECRET KEY AND SUPPLY IT ON EACH REQUEST SO THAT WE CAN SUCCESSFULLY \n    VERIFY THE PAYLOAD AND HEADER. WITHOUT THE USER HALF OF THE SECRET, DECODING THE HEADER AND PAYLOAD IS POSSIBLE,\n    BUT VERIFICATION OF THE TOKEN BY OUR PLATFORM WILL FAIL. THE USER HALF OF THE SECRET ALSO HAS THE ADDED BENEFIT THAT ANY API TOKENS STORED WITHIN OUR DATABASE ARE \n    USELESS AND UNUSABLE UNLESS THE USER HALF OF THE SECRET KEY IS ALSO COMPROMISED, WHICH WOULD BE AN UNLIKELY SITUATION AS IT IS NOT STORED ON THE SERVER.\n    API TOKENS ARE STORED WITHIN OUR DATABASE TO ENABLE US TO TRACK WHICH USERS USE CERTAIN ROUTES WITHIN THE API, AND INVALIDATE THE USE OF THE API KEY\n    AS A WHOLE (SHOULD IT BE USED FOR IMPROPER PURPOSES) BY SETTING A BOOLEAN FLAG WITHIN THE MODEL WHERE THE API KEYS ARE STORED. \n    \n    */\n    \n    \n    //Require the jwt module\n    const jwt = require('jsonwebtoken');\n    \n    //Required the UUID module\n    const uuid = require('node-uuid');\n    \n    //Our secret API key, (remember to move this to our config files later when can be bothered >:) )\n    const apiKey = \"secret-half\";\n    \n    const createApiSecret = function(apiKey, sharedSecret) {\n        return sails.config.session.secret + sharedSecret;\n    }\n    \n    module.exports = {\n    \n        //Create an api token from the given request and payload\n        createApiToken: function(req, payload, cb) {\n            //Grab the key..\n            const key = req.body.sfKey || req.query.sfKey || req.headers['x-seatfilla-key'] || req.params.sfKey;\n    \n            //If we have the payload and the key...\n            if (payload && key) {\n                //Sign it and return.\n                return cb(null, jwt.sign(payload, createApiSecret(apiKey, key)));\n            }\n            else {\n                //Something went wrong.. lets debug.\n                sails.log.debug('Error creating API token in services/jwtService.js')\n                    //return control, call callback.\n                return cb(new Error('Did not recieve all information required for creating API token'), null);\n            }\n        },\n    \n        //Verify an api token.\n        verifyApiToken: function(req, cb) {\n    \n            //Grab the token and the key\n            const token = req.param('sfToken') || req.headers['x-access-token'];\n            const key = req.param('sfKey') || req.headers['x-seatfilla-key'];\n    \n            //We haven't been supplied with the right information.. return.\n            if (!token || !key) {\n                return cb(new Error('Missing token or key'));\n            }\n    \n            //Lets verify our token... and return to the callers cb.\n            jwt.verify(token, createApiSecret(apiKey, key), (err, decoded) => {\n                if (err) return cb(err)\n                else return cb(null, decoded, token);\n            });\n        }\n    };\n","undoManager":{"mark":-2,"position":31,"stack":[[{"start":{"row":3,"column":0},"end":{"row":3,"column":9},"action":"remove","lines":["   NOTES:"],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":13,"column":124},"action":"remove","lines":["","   Supply a secret key, this will call createApiToken....","   Signs the token with server half + user half (user is responsible for keeping his half safe)","   The payload for the api token should include:","            *** The userID the API token is associated with ***","            *** The permissions associated with the token ***","","   The user will then need to send the sfKey in the request along with the generated sfToken.","   Consequently we can store the API key in our database, since its of no use to a hacker without the user half of the key","   (Just the token itself will will cause verifyToken to fail because the underlying HMAC algorithm will fail).","   We want to be able to store the generated API key in the database, because API keys in SeatFilla will need to be verfied."],"id":3},{"start":{"row":3,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["Restful API token generation using JSON Web Tokens (industry standard RFC 7519). This allows developers to control who is authorized to access certain methods within the restful API, and also associate requests with a particular user. They can be used for both authentication and authorization and are becoming popular as they allow developers to create granular permissions and access to resources, similar to when a DBA administrates single user database permissions for creating, reading, updating, deleting and dropping tables. The way they work is by using base64 - a binary to string encoding algorithm - on both a header (consisting of an algorithm and certain other attributes) and a payload, which can contain any information required by the application e.g. application specific information. For this project, we encoded the permissions a certain token (or user of a token) has when accessing API routes into the payload and the user that the token was generated by so we could associate it with a particular user later when a HTTP request is made to the underlying platforms API.  After both the header and the payload have been encoded in base64, they are appended via a separator ‘.’ and signed using a cryptographic hash function (in the case of this project, HMACSHA256 was used as the hash function). The hash function is designed to protect the message from being tampered with, but information within the message can still be seen by prying eyes by simply base64 decoding the first two parts of the token. As such, confidential information such as passwords, should not be stored within the payload or header. The hash function takes a secret key as input which can be generated on the server and kept safe. If the secret key becomes compromised, it should be immediately rotated. An example of how the the payload and header are signed by the HMAC algorithm is shown below:","","HMACSHA256(","  base64UrlEncode(header) + \".\" +","  base64UrlEncode(payload),","  SECRET //",")","","The end result of this is a token with 3 parts, which looks something like:","","\teyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ","","Although the token is inherently safe, as the secret used for the cryptographic hash function is stored on the server (in a external file,  config file ect) we decided to make it even safer, by making each API token signed with a different secret. To do this, API users are responsible for supplying half of the secret used in cryptographic hash algorithm. This ‘user-half’ of the secret key is not stored anywhere by our platform itself, it is up to the user to retain this secret key and supply it on each request so that we can successfully verify the payload and header. Without the user half of the secret, decoding the header and payload is possible, but verification of the token by our platform will fail. The user half of the secret also has the added benefit that any API tokens stored within our database are useless and unusable unless the user half of the secret key is also compromised, which would be an unlikely situation as it is not stored on the server. API tokens are stored within our database to enable us to track which users use certain routes within the API, and invalidate the use of the API key as a whole (should it be used for improper purposes) by setting a boolean flag within the model where the API keys are stored. ",""]}],[{"start":{"row":3,"column":81},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":4,"column":102},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":5,"column":111},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":6,"column":106},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":7,"column":131},"end":{"row":7,"column":132},"action":"remove","lines":[" "],"id":8},{"start":{"row":7,"column":131},"end":{"row":8,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":8,"column":79},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":9,"column":90},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":10,"column":101},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":11}],[{"start":{"row":11,"column":101},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":12,"column":105},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":13}],[{"start":{"row":13,"column":114},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":14,"column":122},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":15}],[{"start":{"row":15,"column":125},"end":{"row":15,"column":126},"action":"remove","lines":[" "],"id":16},{"start":{"row":15,"column":125},"end":{"row":16,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":16,"column":129},"end":{"row":16,"column":130},"action":"remove","lines":[" "],"id":17},{"start":{"row":16,"column":129},"end":{"row":17,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":17,"column":128},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":18}],[{"start":{"row":18,"column":137},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":19}],[{"start":{"row":31,"column":1249},"end":{"row":32,"column":0},"action":"remove","lines":["",""],"id":20}],[{"start":{"row":31,"column":117},"end":{"row":31,"column":118},"action":"remove","lines":[" "],"id":22},{"start":{"row":31,"column":117},"end":{"row":32,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":32,"column":130},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":23}],[{"start":{"row":33,"column":144},"end":{"row":34,"column":0},"action":"insert","lines":["",""],"id":24}],[{"start":{"row":34,"column":152},"end":{"row":35,"column":0},"action":"insert","lines":["",""],"id":25}],[{"start":{"row":35,"column":112},"end":{"row":35,"column":113},"action":"remove","lines":[" "],"id":26},{"start":{"row":35,"column":112},"end":{"row":36,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":37,"column":2},"end":{"row":37,"column":9},"action":"remove","lines":["       "],"id":27},{"start":{"row":49,"column":32},"end":{"row":49,"column":33},"action":"remove","lines":[" "]},{"start":{"row":49,"column":40},"end":{"row":49,"column":41},"action":"insert","lines":[" "]},{"start":{"row":49,"column":54},"end":{"row":49,"column":55},"action":"insert","lines":[" "]},{"start":{"row":50,"column":38},"end":{"row":50,"column":39},"action":"insert","lines":[" "]},{"start":{"row":50,"column":40},"end":{"row":50,"column":41},"action":"insert","lines":[" "]},{"start":{"row":55,"column":4},"end":{"row":55,"column":8},"action":"remove","lines":["    "]},{"start":{"row":56,"column":0},"end":{"row":56,"column":1},"action":"remove","lines":[" "]},{"start":{"row":56,"column":4},"end":{"row":56,"column":7},"action":"remove","lines":["   "]},{"start":{"row":56,"column":19},"end":{"row":56,"column":20},"action":"insert","lines":[" "]},{"start":{"row":56,"column":46},"end":{"row":56,"column":47},"action":"insert","lines":[" "]},{"start":{"row":57,"column":8},"end":{"row":57,"column":12},"action":"remove","lines":["    "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":1},"action":"remove","lines":[" "]},{"start":{"row":58,"column":8},"end":{"row":58,"column":11},"action":"remove","lines":["   "]},{"start":{"row":59,"column":0},"end":{"row":59,"column":12},"action":"remove","lines":["            "]},{"start":{"row":60,"column":0},"end":{"row":60,"column":4},"action":"remove","lines":["    "]},{"start":{"row":61,"column":8},"end":{"row":61,"column":12},"action":"remove","lines":["    "]},{"start":{"row":61,"column":10},"end":{"row":61,"column":11},"action":"insert","lines":[" "]},{"start":{"row":61,"column":27},"end":{"row":61,"column":28},"action":"insert","lines":[" "]},{"start":{"row":62,"column":0},"end":{"row":62,"column":4},"action":"remove","lines":["    "]},{"start":{"row":63,"column":0},"end":{"row":63,"column":4},"action":"remove","lines":["    "]},{"start":{"row":64,"column":4},"end":{"row":65,"column":0},"action":"insert","lines":["    }",""]},{"start":{"row":65,"column":8},"end":{"row":65,"column":9},"action":"remove","lines":["}"]},{"start":{"row":65,"column":12},"end":{"row":65,"column":13},"action":"insert","lines":[" "]},{"start":{"row":66,"column":0},"end":{"row":66,"column":4},"action":"remove","lines":["    "]},{"start":{"row":67,"column":0},"end":{"row":67,"column":4},"action":"remove","lines":["    "]},{"start":{"row":69,"column":12},"end":{"row":69,"column":16},"action":"remove","lines":["    "]},{"start":{"row":70,"column":8},"end":{"row":70,"column":12},"action":"remove","lines":["    "]},{"start":{"row":71,"column":0},"end":{"row":71,"column":1},"action":"remove","lines":[" "]},{"start":{"row":71,"column":4},"end":{"row":71,"column":7},"action":"remove","lines":["   "]},{"start":{"row":73,"column":0},"end":{"row":73,"column":4},"action":"remove","lines":["    "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":3},"action":"remove","lines":["   "]},{"start":{"row":74,"column":4},"end":{"row":74,"column":5},"action":"remove","lines":[" "]},{"start":{"row":74,"column":19},"end":{"row":74,"column":20},"action":"insert","lines":[" "]},{"start":{"row":74,"column":37},"end":{"row":74,"column":38},"action":"insert","lines":[" "]},{"start":{"row":76,"column":0},"end":{"row":76,"column":2},"action":"remove","lines":["  "]},{"start":{"row":76,"column":8},"end":{"row":76,"column":10},"action":"remove","lines":["  "]},{"start":{"row":77,"column":0},"end":{"row":77,"column":3},"action":"remove","lines":["   "]},{"start":{"row":77,"column":8},"end":{"row":77,"column":9},"action":"remove","lines":[" "]},{"start":{"row":78,"column":0},"end":{"row":78,"column":4},"action":"remove","lines":["    "]},{"start":{"row":80,"column":8},"end":{"row":80,"column":12},"action":"remove","lines":["    "]},{"start":{"row":81,"column":0},"end":{"row":81,"column":1},"action":"remove","lines":[" "]},{"start":{"row":81,"column":8},"end":{"row":81,"column":11},"action":"remove","lines":["   "]},{"start":{"row":81,"column":10},"end":{"row":81,"column":11},"action":"insert","lines":[" "]},{"start":{"row":81,"column":27},"end":{"row":81,"column":28},"action":"insert","lines":[" "]},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"remove","lines":["    "]},{"start":{"row":82,"column":12},"end":{"row":82,"column":13},"action":"remove","lines":[" "]},{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"remove","lines":["    "]},{"start":{"row":85,"column":8},"end":{"row":85,"column":12},"action":"remove","lines":["    "]},{"start":{"row":86,"column":0},"end":{"row":86,"column":1},"action":"remove","lines":[" "]},{"start":{"row":86,"column":8},"end":{"row":86,"column":11},"action":"remove","lines":["   "]},{"start":{"row":86,"column":49},"end":{"row":86,"column":50},"action":"insert","lines":[" "]},{"start":{"row":86,"column":70},"end":{"row":86,"column":71},"action":"insert","lines":[" "]},{"start":{"row":86,"column":73},"end":{"row":86,"column":74},"action":"insert","lines":[" "]},{"start":{"row":86,"column":75},"end":{"row":86,"column":77},"action":"remove","lines":["  "]},{"start":{"row":87,"column":0},"end":{"row":87,"column":1},"action":"remove","lines":[" "]},{"start":{"row":87,"column":12},"end":{"row":87,"column":15},"action":"remove","lines":["   "]},{"start":{"row":87,"column":14},"end":{"row":87,"column":15},"action":"insert","lines":[" "]},{"start":{"row":87,"column":35},"end":{"row":87,"column":36},"action":"remove","lines":[" "]},{"start":{"row":88,"column":0},"end":{"row":88,"column":4},"action":"remove","lines":["    "]},{"start":{"row":88,"column":49},"end":{"row":88,"column":50},"action":"remove","lines":[" "]},{"start":{"row":89,"column":8},"end":{"row":89,"column":12},"action":"remove","lines":["    "]},{"start":{"row":90,"column":0},"end":{"row":90,"column":1},"action":"remove","lines":[" "]},{"start":{"row":90,"column":4},"end":{"row":90,"column":7},"action":"remove","lines":["   "]},{"start":{"row":92,"column":0},"end":{"row":93,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":4},"action":"insert","lines":["    "],"id":28},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"insert","lines":["    "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]},{"start":{"row":4,"column":0},"end":{"row":4,"column":4},"action":"insert","lines":["    "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":4},"action":"insert","lines":["    "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":4},"action":"insert","lines":["    "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":4},"action":"insert","lines":["    "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"insert","lines":["    "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":4},"action":"insert","lines":["    "]},{"start":{"row":10,"column":0},"end":{"row":10,"column":4},"action":"insert","lines":["    "]},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"insert","lines":["    "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"insert","lines":["    "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"insert","lines":["    "]},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["    "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"insert","lines":["    "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"insert","lines":["    "]},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"insert","lines":["    "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"insert","lines":["    "]},{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"insert","lines":["    "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"insert","lines":["    "]},{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"insert","lines":["    "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"insert","lines":["    "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"insert","lines":["    "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"insert","lines":["    "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":4},"action":"insert","lines":["    "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"insert","lines":["    "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"insert","lines":["    "]},{"start":{"row":30,"column":0},"end":{"row":30,"column":4},"action":"insert","lines":["    "]},{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"insert","lines":["    "]},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"insert","lines":["    "]},{"start":{"row":33,"column":0},"end":{"row":33,"column":4},"action":"insert","lines":["    "]},{"start":{"row":34,"column":0},"end":{"row":34,"column":4},"action":"insert","lines":["    "]},{"start":{"row":35,"column":0},"end":{"row":35,"column":4},"action":"insert","lines":["    "]},{"start":{"row":36,"column":0},"end":{"row":36,"column":4},"action":"insert","lines":["    "]},{"start":{"row":37,"column":0},"end":{"row":37,"column":4},"action":"insert","lines":["    "]},{"start":{"row":38,"column":0},"end":{"row":38,"column":4},"action":"insert","lines":["    "]},{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"insert","lines":["    "]},{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"insert","lines":["    "]},{"start":{"row":41,"column":0},"end":{"row":41,"column":4},"action":"insert","lines":["    "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"insert","lines":["    "]},{"start":{"row":43,"column":0},"end":{"row":43,"column":4},"action":"insert","lines":["    "]},{"start":{"row":44,"column":0},"end":{"row":44,"column":4},"action":"insert","lines":["    "]},{"start":{"row":45,"column":0},"end":{"row":45,"column":4},"action":"insert","lines":["    "]},{"start":{"row":46,"column":0},"end":{"row":46,"column":4},"action":"insert","lines":["    "]},{"start":{"row":47,"column":0},"end":{"row":47,"column":4},"action":"insert","lines":["    "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "]},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"insert","lines":["    "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":4},"action":"insert","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"insert","lines":["    "]},{"start":{"row":55,"column":0},"end":{"row":55,"column":4},"action":"insert","lines":["    "]},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["    "]},{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"insert","lines":["    "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"insert","lines":["    "]},{"start":{"row":59,"column":0},"end":{"row":59,"column":4},"action":"insert","lines":["    "]},{"start":{"row":60,"column":0},"end":{"row":60,"column":4},"action":"insert","lines":["    "]},{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"insert","lines":["    "]},{"start":{"row":62,"column":0},"end":{"row":62,"column":4},"action":"insert","lines":["    "]},{"start":{"row":63,"column":0},"end":{"row":63,"column":4},"action":"insert","lines":["    "]},{"start":{"row":64,"column":0},"end":{"row":64,"column":4},"action":"insert","lines":["    "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"insert","lines":["    "]},{"start":{"row":66,"column":0},"end":{"row":66,"column":4},"action":"insert","lines":["    "]},{"start":{"row":67,"column":0},"end":{"row":67,"column":4},"action":"insert","lines":["    "]},{"start":{"row":68,"column":0},"end":{"row":68,"column":4},"action":"insert","lines":["    "]},{"start":{"row":69,"column":0},"end":{"row":69,"column":4},"action":"insert","lines":["    "]},{"start":{"row":70,"column":0},"end":{"row":70,"column":4},"action":"insert","lines":["    "]},{"start":{"row":71,"column":0},"end":{"row":71,"column":4},"action":"insert","lines":["    "]},{"start":{"row":72,"column":0},"end":{"row":72,"column":4},"action":"insert","lines":["    "]},{"start":{"row":73,"column":0},"end":{"row":73,"column":4},"action":"insert","lines":["    "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":4},"action":"insert","lines":["    "]},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"insert","lines":["    "]},{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"insert","lines":["    "]},{"start":{"row":77,"column":0},"end":{"row":77,"column":4},"action":"insert","lines":["    "]},{"start":{"row":78,"column":0},"end":{"row":78,"column":4},"action":"insert","lines":["    "]},{"start":{"row":79,"column":0},"end":{"row":79,"column":4},"action":"insert","lines":["    "]},{"start":{"row":80,"column":0},"end":{"row":80,"column":4},"action":"insert","lines":["    "]},{"start":{"row":81,"column":0},"end":{"row":81,"column":4},"action":"insert","lines":["    "]},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"insert","lines":["    "]},{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"insert","lines":["    "]},{"start":{"row":84,"column":0},"end":{"row":84,"column":4},"action":"insert","lines":["    "]},{"start":{"row":85,"column":0},"end":{"row":85,"column":4},"action":"insert","lines":["    "]},{"start":{"row":86,"column":0},"end":{"row":86,"column":4},"action":"insert","lines":["    "]},{"start":{"row":87,"column":0},"end":{"row":87,"column":4},"action":"insert","lines":["    "]},{"start":{"row":88,"column":0},"end":{"row":88,"column":4},"action":"insert","lines":["    "]},{"start":{"row":89,"column":0},"end":{"row":89,"column":4},"action":"insert","lines":["    "]},{"start":{"row":90,"column":0},"end":{"row":90,"column":4},"action":"insert","lines":["    "]},{"start":{"row":91,"column":0},"end":{"row":91,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":36,"column":167},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":29},{"start":{"row":37,"column":0},"end":{"row":37,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":37,"column":156},"end":{"row":37,"column":157},"action":"remove","lines":[" "],"id":30},{"start":{"row":37,"column":156},"end":{"row":38,"column":0},"action":"insert","lines":["",""]},{"start":{"row":38,"column":0},"end":{"row":38,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":38,"column":152},"end":{"row":38,"column":153},"action":"remove","lines":[" "],"id":31},{"start":{"row":38,"column":152},"end":{"row":39,"column":0},"action":"insert","lines":["",""]},{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":39,"column":0},"end":{"row":40,"column":0},"action":"remove","lines":["    as a whole (should it be used for improper purposes) by setting a boolean flag within the model where the API keys are stored. ",""],"id":32},{"start":{"row":39,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["    as a whole (should it be used for improper purposes) by setting a boolean flag within the model where the API keys are stored. ",""]}],[{"start":{"row":1,"column":3},"end":{"row":39,"column":131},"action":"remove","lines":["     Created by Dale","      ","    Restful API token generation using JSON Web Tokens (industry standard RFC 7519). ","    This allows developers to control who is authorized to access certain methods within the restful API, ","    and also associate requests with a particular user. They can be used for both authentication and authorization ","    and are becoming popular as they allow developers to create granular permissions and access to resources, ","    similar to when a DBA administrates single user database permissions for creating, reading, updating, deleting and dropping tables.","    The way they work is by using base64 - a binary to string encoding algorithm - ","    on both a header (consisting of an algorithm and certain other attributes) and a payload, ","    which can contain any information required by the application e.g. application specific information. ","    For this project, we encoded the permissions a certain token (or user of a token) has when accessing ","    API routes into the payload and the user that the token was generated by so we could associate it with a ","    particular user later when a HTTP request is made to the underlying platforms API.  After both the header and the ","    payload have been encoded in base64, they are appended via a separator ‘.’ and signed using a cryptographic hash function ","    (in the case of this project, HMACSHA256 was used as the hash function). The hash function is designed to protect the message","    from being tampered with, but information within the message can still be seen by prying eyes by simply base64 decoding the first","    two parts of the token. As such, confidential information such as passwords, should not be stored within the payload or header. ","    The hash function takes a secret key as input which can be generated on the server and kept safe. If the secret key becomes compromised, ","    it should be immediately rotated. An example of how the the payload and header are signed by the HMAC algorithm is shown below:","    ","    HMACSHA256(","      base64UrlEncode(header) + \".\" +","      base64UrlEncode(payload),","      SECRET //","    )","    ","    The end result of this is a token with 3 parts, which looks something like:","    ","    \teyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ","    ","    Although the token is inherently safe, as the secret used for the cryptographic hash function is stored on the server","    (in a external file,  config file ect) we decided to make it even safer, by making each API token signed with a different secret. ","    To do this, API users are responsible for supplying half of the secret used in cryptographic hash algorithm. This ‘user-half’ of the secret key ","    is not stored anywhere by our platform itself, it is up to the user to retain this secret key and supply it on each request so that we can successfully ","    verify the payload and header. Without the user half of the secret, decoding the header and payload is possible,","    but verification of the token by our platform will fail. The user half of the secret also has the added benefit that any API tokens stored within our database are ","    useless and unusable unless the user half of the secret key is also compromised, which would be an unlikely situation as it is not stored on the server.","    API tokens are stored within our database to enable us to track which users use certain routes within the API, and invalidate the use of the API key","    as a whole (should it be used for improper purposes) by setting a boolean flag within the model where the API keys are stored. "],"id":33},{"start":{"row":1,"column":3},"end":{"row":39,"column":131},"action":"insert","lines":["     CREATED BY DALE","      ","    RESTFUL API TOKEN GENERATION USING JSON WEB TOKENS (INDUSTRY STANDARD RFC 7519). ","    THIS ALLOWS DEVELOPERS TO CONTROL WHO IS AUTHORIZED TO ACCESS CERTAIN METHODS WITHIN THE RESTFUL API, ","    AND ALSO ASSOCIATE REQUESTS WITH A PARTICULAR USER. THEY CAN BE USED FOR BOTH AUTHENTICATION AND AUTHORIZATION ","    AND ARE BECOMING POPULAR AS THEY ALLOW DEVELOPERS TO CREATE GRANULAR PERMISSIONS AND ACCESS TO RESOURCES, ","    SIMILAR TO WHEN A DBA ADMINISTRATES SINGLE USER DATABASE PERMISSIONS FOR CREATING, READING, UPDATING, DELETING AND DROPPING TABLES.","    THE WAY THEY WORK IS BY USING BASE64 - A BINARY TO STRING ENCODING ALGORITHM - ","    ON BOTH A HEADER (CONSISTING OF AN ALGORITHM AND CERTAIN OTHER ATTRIBUTES) AND A PAYLOAD, ","    WHICH CAN CONTAIN ANY INFORMATION REQUIRED BY THE APPLICATION E.G. APPLICATION SPECIFIC INFORMATION. ","    FOR THIS PROJECT, WE ENCODED THE PERMISSIONS A CERTAIN TOKEN (OR USER OF A TOKEN) HAS WHEN ACCESSING ","    API ROUTES INTO THE PAYLOAD AND THE USER THAT THE TOKEN WAS GENERATED BY SO WE COULD ASSOCIATE IT WITH A ","    PARTICULAR USER LATER WHEN A HTTP REQUEST IS MADE TO THE UNDERLYING PLATFORMS API.  AFTER BOTH THE HEADER AND THE ","    PAYLOAD HAVE BEEN ENCODED IN BASE64, THEY ARE APPENDED VIA A SEPARATOR ‘.’ AND SIGNED USING A CRYPTOGRAPHIC HASH FUNCTION ","    (IN THE CASE OF THIS PROJECT, HMACSHA256 WAS USED AS THE HASH FUNCTION). THE HASH FUNCTION IS DESIGNED TO PROTECT THE MESSAGE","    FROM BEING TAMPERED WITH, BUT INFORMATION WITHIN THE MESSAGE CAN STILL BE SEEN BY PRYING EYES BY SIMPLY BASE64 DECODING THE FIRST","    TWO PARTS OF THE TOKEN. AS SUCH, CONFIDENTIAL INFORMATION SUCH AS PASSWORDS, SHOULD NOT BE STORED WITHIN THE PAYLOAD OR HEADER. ","    THE HASH FUNCTION TAKES A SECRET KEY AS INPUT WHICH CAN BE GENERATED ON THE SERVER AND KEPT SAFE. IF THE SECRET KEY BECOMES COMPROMISED, ","    IT SHOULD BE IMMEDIATELY ROTATED. AN EXAMPLE OF HOW THE THE PAYLOAD AND HEADER ARE SIGNED BY THE HMAC ALGORITHM IS SHOWN BELOW:","    ","    HMACSHA256(","      BASE64URLENCODE(HEADER) + \".\" +","      BASE64URLENCODE(PAYLOAD),","      SECRET //","    )","    ","    THE END RESULT OF THIS IS A TOKEN WITH 3 PARTS, WHICH LOOKS SOMETHING LIKE:","    ","    \tEYJHBGCIOIJIUZI1NIISINR5CCI6IKPXVCJ9.EYJZDWIIOIIXMJM0NTY3ODKWIIWIBMFTZSI6IKPVAG4GRG9LIIWIYWRTAW4IONRYDWV9.TJVA95ORM7E2CBAB30RMHRHDCEFXJOYZGEFONFH7HGQ","    ","    ALTHOUGH THE TOKEN IS INHERENTLY SAFE, AS THE SECRET USED FOR THE CRYPTOGRAPHIC HASH FUNCTION IS STORED ON THE SERVER","    (IN A EXTERNAL FILE,  CONFIG FILE ECT) WE DECIDED TO MAKE IT EVEN SAFER, BY MAKING EACH API TOKEN SIGNED WITH A DIFFERENT SECRET. ","    TO DO THIS, API USERS ARE RESPONSIBLE FOR SUPPLYING HALF OF THE SECRET USED IN CRYPTOGRAPHIC HASH ALGORITHM. THIS ‘USER-HALF’ OF THE SECRET KEY ","    IS NOT STORED ANYWHERE BY OUR PLATFORM ITSELF, IT IS UP TO THE USER TO RETAIN THIS SECRET KEY AND SUPPLY IT ON EACH REQUEST SO THAT WE CAN SUCCESSFULLY ","    VERIFY THE PAYLOAD AND HEADER. WITHOUT THE USER HALF OF THE SECRET, DECODING THE HEADER AND PAYLOAD IS POSSIBLE,","    BUT VERIFICATION OF THE TOKEN BY OUR PLATFORM WILL FAIL. THE USER HALF OF THE SECRET ALSO HAS THE ADDED BENEFIT THAT ANY API TOKENS STORED WITHIN OUR DATABASE ARE ","    USELESS AND UNUSABLE UNLESS THE USER HALF OF THE SECRET KEY IS ALSO COMPROMISED, WHICH WOULD BE AN UNLIKELY SITUATION AS IT IS NOT STORED ON THE SERVER.","    API TOKENS ARE STORED WITHIN OUR DATABASE TO ENABLE US TO TRACK WHICH USERS USE CERTAIN ROUTES WITHIN THE API, AND INVALIDATE THE USE OF THE API KEY","    AS A WHOLE (SHOULD IT BE USED FOR IMPROPER PURPOSES) BY SETTING A BOOLEAN FLAG WITHIN THE MODEL WHERE THE API KEYS ARE STORED. "]}],[{"start":{"row":40,"column":4},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":34},{"start":{"row":41,"column":0},"end":{"row":41,"column":4},"action":"insert","lines":["    "]}]]},"ace":{"folds":[],"scrolltop":446.25,"scrollleft":0,"selection":{"start":{"row":15,"column":38},"end":{"row":15,"column":38},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":39,"state":"comment1","mode":"ace/mode/javascript"}},"timestamp":1471920025000}